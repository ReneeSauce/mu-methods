//body component for seed-phrase.jsx
import { faker } from "@faker-js/faker";
import _ from "lodash";
import { useCallback, useContext, useEffect, useState } from "react";
import copyI from "../../../assets/copy-icon.svg";
import { Button, Pill } from "../../../components";
import { WizardContext } from "../../../contexts/wizard-context";
//TODO: Should Download button have an error popup?
//TODO: put in icons when available
//TODO: Check on tertiary bg color - temp change in button file set to bg-beta
//TODO: Check on how to change padding/margin-y to 13px from 19px
//note will need to be 12px or 16px bs

/**
 * Body Component - used with the Seed-phrase component
 * @author [K. Ehrenclou](https://github.com/kehrenclou)
 * @param isVisible passed from parent - boolean useState value to control seed phrase copied notification
 * @param setIsVisible passed from parent - boolean useState setter to control seed phrase copied notification
 * @param updateSeedPhrases function to updateSeedPhrases in WizardContext
 * @param WizardContext context for data in Sign up Wizard
 * @param isCopied boolean useState value to control if seed phrases copied
 * @param setIsCopied boolean useState setter to control if seed phrases copied
 * @param seedPhrases  useState value containing seed phrase array - local not in context
 * @param setSeedPhrases useState setter to set seed phrase array - local not in context
 * @param text text used for seed in Pill component
 * @param key key used to map seed in Pill component
 * @param textOpacity param to set textOpacity in Pill component
 * @param onClick param to call button onclick fucntions in Buttons
 */

export const Body = ({ isVisible, setIsVisible }) => {
  /* ----------------------------- set up Context ----------------------------- */
  // Get updateSeed
  const { updateSeedPhrases } = useContext(WizardContext);

  /* -------------------------------- useState -------------------------------- */
  const [isCopied, setIsCopied] = useState(false);

  // These are seed phrases generated by the library
  // Triggered on page loading with use effect from SDK
  // At this step, they can still be overwritten (not in context yet)
  const [seedPhrases, setSeedPhrases] = useState([]);

  /* ------------------------------- use Effect ------------------------------- */
  // Generate Seed Phrases
  useEffect(() => {
    setSeedPhrases(
      Array.from({ length: 12 }, () =>
        faker.music.genre()
      ) /** Sdk.generateSeedPhrases()  */
    );
  }, []);

  /* -------------------------------- callBacks ------------------------------- */
  // Regenerate Seed Phrases
  const regenerateSeedPhrases = useCallback(() => {
    setSeedPhrases(
      Array.from({ length: 12 }, () =>
        faker.word.adjective()
      ) /** Sdk.generateSeedPhrases()  */
    );
    setIsVisible(false);
  }, []);

  // Update Context store when seedPhrases changes
  useEffect(() => {
    updateSeedPhrases(seedPhrases);
  }, [seedPhrases]);

  /* -------------------------------- functions ------------------------------- */
  // Copy to clipboard function - gets seeds from store

  const copy = async () => {
    try {
      await navigator.clipboard.writeText(seedPhrases.join(" "));
      setIsCopied(true);
      setIsVisible(true);
      // alert(seedPhrases.join(" "));
    } catch (err) {
      alert("Could not copy to clipboard");
    }
  };

  // Download to text function
  const downloadTextFile = () => {
    const element = document.createElement("a");
    const blobData = seedPhrases.join(" ");
    const file = new Blob([blobData], {
      type: "text/plain",
    });

    element.href = URL.createObjectURL(file);
    element.download = "myFile.txt";
    document.body.appendChild(element);
    element.click();
  };

  /* --------------------------------- return --------------------------------- */
  return (
    <>
      <h3 className="pb-12px m-0 fw-bold text-white text-opacity-90 fs-18px">
        Save your seed phrase
      </h3>

      <div className="d-flex flex-wrap justify-content-center gap-8px square rounded w-100 bg-beta px-14px py-20px mb-12px">
        {seedPhrases.map((phrase) => (
          <Pill
            text={phrase}
            key={_.uniqueId("seed-phrase-")}
            className="fs-16px fw-normal"
            opacity="20"
            shape="square"
            textOpacity={100}
          ></Pill>
        ))}
      </div>
      <Button
        size="lg"
        buttonKind="tertiary"
        className="bg-beta my-16px"
        onClick={regenerateSeedPhrases}
      >
        Regenerate
      </Button>
      {isVisible && (
        <p className="position-absolute top-0 start-50 translate-middle mt-40px fs-16px w-100 fw-normal py-20px mb-0 lh-sm text-center text-white text-opacity-100 bg-beta bg-opacity-100 rounded">
          {isCopied ? "Seed phrase copied to clipboard" : ""}
        </p>
      )}

      <p className="fs-14px fw-normal mt-auto text-center lh-sm mb-32px">
        Write down your seed phrase in a secure place. If you loose it without
        setting up peers to restore it, you'll loose access to your account
        forever
      </p>
      <div className=" d-flex gap-16px w-100">
        <Button size="md" buttonKind="tertiary" leftIcon={copyI} onClick={copy}>
          Copy
        </Button>
        <Button size="md" buttonKind="tertiary" onClick={downloadTextFile}>
          Download
        </Button>
      </div>
    </>
  );
};
